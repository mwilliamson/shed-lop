module lop.rulesTest;

members {
    testCases
}

import sequences;
import strings;
import lazySequences;
import options;

import hat.TestCase;
import duck.assertThat;
import duck.isList;
import duck.equalTo;
import duck.anything;
import duck.MatchResult;

import lop.rules;
import lop.results;
import lop.token.Token;
import lop.sources.StringSource;
import lop.sources.noSource;
import lop.strings.createStringSource;
import lop.testing.isSuccess;
import lop.testing.isFailure;
import lop.testing.isFailureWithMessage;
import lop.testing.isFatalWithMessage;
import lop.testing.hasSource;
import lop.messages.unexpectedInputError;

def source fun(value: String) => createStringSource(value, "raw string");

val testCases = listOf[TestCase](
    TestCase("rules.token fails if sequence is empty", fun() =>
        assertIsFailureWithMessage[String](
            rules.token("identifier", "true"),
            emptyList,
            unexpectedInputError("token", "end of token sequence", noSource)
        )
    ),
    
    TestCase("rules.token fails if input token is of wrong type", fun() =>
        assertIsFailureWithMessage[String](
            rules.token("identifier", "true"),
            listOf(Token("keyword", "true", source("true"))),
            unexpectedInputError("identifier \"true\"", "keyword \"true\"", noSource)
        )
    ),
    
    TestCase("rules.token fails if input token has wrong value", fun() =>
        assertIsFailureWithMessage[String](
            rules.token("identifier", "true"),
            listOf(Token("identifier", "false", source("false"))),
            unexpectedInputError("identifier \"true\"", "identifier \"false\"", noSource)
        )
    ),
    
    TestCase("rules.token succeeds if type and value match", fun() =>
        assertSuccessfulParse[String](
            rules.token("identifier", "true"),
            listOf(Token("identifier", "true", source("true"))),
            equalTo[String]("true")
        )
    ),
    
    TestCase("rules.tokenOfType fails if input token is of wrong type", fun() =>
        assertIsFailureWithMessage[String](
            rules.tokenOfType("identifier"),
            listOf(Token("keyword", "true", source("true"))),
            unexpectedInputError("identifier", "keyword \"true\"", noSource)
        )
    ),
    
    TestCase("rules.tokenOfType succeeds with value of token if token type matches", fun() =>
        assertSuccessfulParse[String](
            rules.tokenOfType("keyword"),
            listOf(Token("keyword", "true", source("true"))),
            equalTo[String]("true")
        )
    ),
    
    TestCase("rules.tokenOfType succeeds with value of token if token type matches", fun() =>
        assertSuccessfulParse[String](
            rules.tokenOfType("keyword"),
            listOf(Token("keyword", "true", source("true"))),
            equalTo[String]("true")
        )
    ),
    
    TestCase("rules.firstOf returns first success", fun() =>
        assertSuccessfulParse[String](
            rules.firstOf("literal", listOf(
                rules.token("keyword", "true"),
                rules.token("keyword", "false"),
                rules.token("keyword", "unit")
            )),
            listOf(Token("keyword", "false", source("false"))),
            equalTo[String]("false")
        )
    ),
    
    TestCase("rules.firstOf fails if no sub-rules match", fun() =>
        assertIsFailureWithMessage[String](
            rules.firstOf("literal", listOf(
                rules.token("keyword", "true"),
                rules.token("keyword", "false")
            )),
            listOf(Token("identifier", "blah", source("blah"))),
            unexpectedInputError("literal", "identifier \"blah\"", noSource)
        )
    ),
    
    TestCase("rules.firstOf fatally fails if subrule fails even if following rule is success", fun() =>
        assertIsFatalWithMessage(
            rules.firstOf("literal", listOf(
                fatalRule,
                rules.token("keyword", "false"),
                rules.token("keyword", "unit")
            )),
            listOf(Token("keyword", "false", source("false"))),
            unexpectedInputError("<expected>", "<actual>", noSource)
        )
    ),
    
    TestCase("rules.map does nothing to failures", fun() =>
        assertIsFailureWithMessage[String](
            rules.map[Unit, Unit](failingRule),
            emptyList,
            unexpectedInputError("<expected>", "<actual>", noSource)
        )
    ),
    
    TestCase("rules.map maps value of success using passed function", fun() =>
        assertSuccessfulParse[String](
            rules.map[String, String](
                rules.token("identifier", "blah"),
                fun(value: String) => value.concat(value)
            ),
            listOf(Token("identifier", "blah", source("blah"))),
            equalTo[String]("blahblah")
        )
    ),
    
    TestCase("rules.sequence fails if element of sequence is missing", fun() =>
        assertIsFailureWithMessage[String](
            rules.sequence()
                .next(rules.token("keyword", "if"))
                .next(rules.tokenOfType("identifier"))
                .next(rules.token("keyword", "then"))
                .tuple(),
            listOf(Token("keyword", "if", source("if")), Token("keyword", "then", source("then"))),
            unexpectedInputError("identifier", "keyword \"then\"", noSource)
        )
    ),
    
    TestCase("rules.sequence succeeds if all elements match", fun() =>
        assertSuccessfulParse[String](
            rules.sequence()
                .next(rules.token("keyword", "if"))
                .next(rules.tokenOfType("identifier"))
                .next(rules.token("keyword", "then"))
                .tuple(),
            listOf(
                Token("keyword", "if", source("if")),
                Token("identifier", "go", source("go")),
                Token("keyword", "then", source("then"))
            ),
            anything
        )
    ),
    
    TestCase("rules.sequence() can capture first value", fun() =>
        assertSuccessfulParse[String](
            rules.sequence()
                .capture(rules.tokenOfType("identifier"))
                .next(rules.token("symbol", ")"))
                .tuple(),
            listOf(
                Token("identifier", "go", source("go")),
                Token("symbol", ")", source(")"))
            ),
            equalTo[String](tuple("go"))
        )
    ),
    
    TestCase("rules.sequence() can capture a single value", fun() =>
        assertSuccessfulParse(
            rules.sequence()
                .next(rules.token("symbol", "("))
                .capture(rules.tokenOfType("identifier"))
                .next(rules.token("symbol", ")"))
                .head(),
            listOf(
                Token("symbol", "(", source("(")),
                Token("identifier", "go", source("go")),
                Token("symbol", ")", source(")"))
            ),
            equalTo("go")
        )
    ),
    
    TestCase("rules.sequence() can capture a single value as a tuple", fun() =>
        assertSuccessfulParse[String](
            rules.sequence()
                .next(rules.token("symbol", "("))
                .capture(rules.tokenOfType("identifier"))
                .next(rules.token("symbol", ")"))
                .tuple(),
            listOf(
                Token("symbol", "(", source("(")),
                Token("identifier", "go", source("go")),
                Token("symbol", ")", source(")"))
            ),
            equalTo[String](tuple("go"))
        )
    ),
    
    TestCase("rules.sequence() can capture multiple values", fun() =>
        assertSuccessfulParse[String](
            rules.sequence()
                .next(rules.token("symbol", "("))
                .capture(rules.tokenOfType("identifier"))
                .next(rules.token("symbol", ","))
                .capture(rules.tokenOfType("identifier"))
                .next(rules.token("symbol", ")"))
                .tuple(),
            listOf(
                Token("symbol", "(", source("(")),
                Token("identifier", "go", source("go")),
                Token("symbol", ",", source(",")),
                Token("identifier", "away", source("away")),
                Token("symbol", ")", source(")"))
            ),
            equalTo(tuple("go", "away"))
        )
    ),
    
    TestCase("rules.sequence() can map tuple", fun() =>
        assertSuccessfulParse[String](
            rules.sequence()
                .next(rules.token("symbol", "("))
                .capture(rules.tokenOfType("identifier"))
                .next(rules.token("symbol", ","))
                .capture(rules.tokenOfType("identifier"))
                .next(rules.token("symbol", ")"))
                .map(fun(first: String, second: String) => first.concat(" ").concat(second)),
            listOf(
                Token("symbol", "(", source("(")),
                Token("identifier", "go", source("go")),
                Token("symbol", ",", source(",")),
                Token("identifier", "away", source("away")),
                Token("symbol", ")", source(")"))
            ),
            equalTo("go away")
        )
    ),
    
    TestCase("rules.sequence() returns error if missing element after cut", fun() =>
        assertIsFatalWithMessage[String](
            rules.sequence()
                .next(rules.token("keyword", "if"))
                .cut()
                .next(rules.tokenOfType("identifier"))
                .tuple(),
            listOf(Token("keyword", "if", source("if")), Token("keyword", "then", source("then"))),
            unexpectedInputError("identifier", "keyword \"then\"", noSource)
        )
    ),
    
    TestCase("rules.sequence() returns failure if missing element before cut", fun() =>
        assertIsFailureWithMessage[String](
            rules.sequence()
                .next(rules.token("keyword", "if"))
                .cut()
                .next(rules.tokenOfType("identifier"))
                .tuple(),
            listOf(Token("keyword", "then", source("then"))),
            unexpectedInputError("keyword \"if\"", "keyword \"then\"", noSource)
        )
    ),
    
    TestCase("zeroOrMore can match no values", fun() =>
        assertSuccessfulParse(
            rules.zeroOrMore(rules.tokenOfType("identifier")),
            emptyList,
            equalTo(emptyList)
        )
    ),
    
    TestCase("zeroOrMore can match multiple values", fun() =>
        assertSuccessfulParse(
            rules.zeroOrMore(rules.tokenOfType("identifier")),
            listOf(
                Token("identifier", "one", source("one")),
                Token("identifier", "two", source("two")),
                Token("identifier", "three", source("three"))
            ),
            equalTo(listOf("one", "two", "three"))
        )
    ),
    
    TestCase("zeroOrMore fails fatally if second match fails fatally", fun() =>
        assertIsFatalWithMessage(
            rules.zeroOrMore(
                rules.sequence().cut().capture(rules.tokenOfType("identifier")).head()
            ),
            listOf(
                Token("identifier", "go", source("go")),
                Token("symbol", ",", source(","))
            ),
            unexpectedInputError("identifier", "symbol \",\"", noSource)
        )
    ),
    
    TestCase("zeroOrMoreWithSeparator can match no values", fun() =>
        assertSuccessfulParse(
            rules.zeroOrMoreWithSeparator(rules.tokenOfType("identifier"), rules.token("symbol", ",")),
            emptyList,
            equalTo(emptyList)
        )
    ),
    
    TestCase("zeroOrMoreWithSeparator can match one value", fun() =>
        assertSuccessfulParse(
            rules.zeroOrMoreWithSeparator(rules.tokenOfType("identifier"), rules.token("symbol", ",")),
            listOf(
                Token("identifier", "go", source("go"))
            ),
            equalTo(listOf("go"))
        )
    ),
    
    TestCase("zeroOrMoreWithSeparator can match multiple values", fun() =>
        assertSuccessfulParse(
            rules.zeroOrMoreWithSeparator(rules.tokenOfType("identifier"), rules.token("symbol", ",")),
            listOf(
                Token("identifier", "go", source("go")),
                Token("symbol", ",", source(",")),
                Token("identifier", "away", source("away"))
            ),
            equalTo(listOf("go", "away"))
        )
    ),
    
    TestCase("zeroOrMoreWithSeparator does not consume final separator", fun() =>
        assertSuccessfulParse(
            rules.sequence()
                .next(rules.zeroOrMoreWithSeparator(rules.tokenOfType("identifier"), rules.token("symbol", ",")))
                .next(rules.token("symbol", ","))
                .tuple(),
            listOf(
                Token("identifier", "go", source("go")),
                Token("symbol", ",", source(","))
            ),
            equalTo(tuple())
        )
    ),
    
    TestCase("zeroOrMoreWithSeparator fails fatally if first match fails fatally", fun() =>
        assertIsFatalWithMessage(
            rules.zeroOrMoreWithSeparator(fatalRule, rules.token("symbol", ",")),
            emptyList,
            unexpectedInputError("<expected>", "<actual>", noSource)
        )
    ),
    
    TestCase("zeroOrMoreWithSeparator fails fatally if later match fails fatally", fun() =>
        assertIsFatalWithMessage(
            rules.zeroOrMoreWithSeparator(
                rules.sequence().cut().capture(rules.tokenOfType("identifier")).head(),
                rules.token("symbol", ",")
            ),
            listOf(
                Token("identifier", "go", source("go")),
                Token("symbol", ",", source(",")),
                Token("symbol", ",", source(","))
            ),
            unexpectedInputError("identifier", "symbol \",\"", noSource)
        )
    ),
    
    TestCase("zeroOrMoreWithSeparator fails fatally if separator match fails fatally", fun() =>
        assertIsFatalWithMessage(
            rules.zeroOrMoreWithSeparator(rules.tokenOfType("identifier"), fatalRule),
            listOf(
                Token("identifier", "go", source("go")),
                Token("symbol", ",", source(","))
            ),
            unexpectedInputError("<expected>", "<actual>", noSource)
        )
    ),
    
    TestCase("optional parses empty string to none", fun() =>
        assertSuccessfulParse(
            rules.optional(rules.tokenOfType("identifier")),
            emptyList,
            equalTo(options.none)
        )
    ),
    
    TestCase("optional parses rule if possible", fun() =>
        assertSuccessfulParse(
            rules.optional(rules.tokenOfType("identifier")),
            listOf(Token("identifier", "blah", source("blah"))),
            equalTo(options.some("blah"))
        )
    ),
    
    TestCase("optional is fatal if sub-rule is fatal", fun() =>
        assertIsFatalWithMessage(
            rules.optional(fatalRule),
            listOf(Token("identifier", "blah", source("blah"))),
            unexpectedInputError("<expected>", "<actual>", noSource)
        )
    ),
    
    TestCase("addSource allows source to be stored on parsed value", fun() => let
        val input = source("-x")
        val tokens = listOf(
            Token("symbol", "-", input.range(0, 1)),
            Token("identifier", "x", input.range(1, 2))
        )
        val rule = rules.addSource(rules.tokenOfType("symbol"))
        val result = rule(tokens.toSequence())
        in assertThat(result.value(), hasSource(input.range(0, 1)))
    )
);

def failingRule fun(tokens: Sequence[Token]) =>
    results.failure(unexpectedInputError("<expected>", "<actual>", noSource));

def fatalRule fun(tokens: Sequence[Token]) =>
    results.fatal(unexpectedInputError("<expected>", "<actual>", noSource));

def stringSource fun(string: String) =>
    createStringSource(string, "raw string");

def assertIsFailureWithMessage fun[T] => (rule: Rule[T], input: List[Token], error: Error) => do {
    return assertParse[T](rule, input, isFailureWithMessage(error));
};

def assertIsFatalWithMessage fun[T] => (rule: Rule[T], input: List[Token], error: Error) => do {
    return assertParse[T](rule, input, isFatalWithMessage(error));
};

def assertSuccessfulParse fun[T] => (rule: Rule[T], input: List[Token], value: T) => do {
    return assertParse[T](rule, input, isSuccess[T](value));
};

def assertParse fun[T] => (rule: Rule[T], input: List[Token], matcher: Matcher) => do {
    val result = rule(input.toSequence());
    return assertThat[T](result, matcher);
};
