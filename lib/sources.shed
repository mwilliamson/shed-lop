module lop/sources;

members {
    StringSource,
    tryGetSource,
    setSource,
    noSource
}

import structs;
import meta;

import lop/range.Range;
import lop/positions;

def StringSource class(string: String, description: String, myRange: Range) => {
    members {
        asString fun() => string.substring(myRange.start(), myRange.end()),
        originalString fun() => string,
        description fun() => description,
        indexRange fun() => myRange,
        
        range fun(rangeStart: Double, rangeEnd: Double) =>
            StringSource(
                string,
                description,
                Range(myRange.start().add(rangeStart), myRange.start().add(rangeEnd))
            ),
            
        sliceFrom fun(index: Double) =>
            StringSource(string, description, Range(myRange.start().add(index), myRange.end())),
            
        struct fun() =>
            structs.create(StringSource, listOf(string, description, myRange)),
            
        describe fun() => let
            val coordinates = positions.calculateStringCoordinates(string, myRange.start())
            in description
                .concat("\nLine number: ").concat(coordinates.lineIndex().add(1).toString())
                .concat("\nCharacter number: ").concat(coordinates.characterIndex().add(1).toString())
    }
};

val sourceKey = meta.createKey(StringSource, "source");

def tryGetSource fun(value: Any) =>
    meta.tryGet(value, sourceKey)

def setSource fun(value: Any, source: StringSource) =>
    meta.set(value, sourceKey, source)

def NoSource class() => {
    members {
        struct fun() => structs.create(NoSource, emptyList),
        
        describe fun() => "(no source)"
    }
}

val noSource = NoSource();
