package lop;

import lazySequenceables;
import sequenceables;
import lazySequences;
import sequences;

import lop.Token;
import lop.results.ParseResult;
import lop.results.Success;
import lop.results.Failure;
import lop.Error;

val results = object {
    public def success fun[T] => (value: T, remaining: StringSource) =>
        Success[T](value, remaining);
        
    public def failure fun(expected: String, actual: String) =>
        Failure(Error(expected, actual));
};

public val rules = object {
    // TODO: should be type Rule[T] = Fun(Sequence[Token]) => ParseResult[T]
    def Rule class() => {}
    
    public def firstOf fun(name: String, rules: List[Rule]) =>
        fun(tokens: Sequence[Token]) => do {
            val ruleResults = lazySequenceables.map[Rule, ParseResult](
                fun(rule: Rule) => rule(tokens),
                rules
            );
            val successes = lazySequenceables.filter[ParseResult](
                fun(result: ParseResult) => result.isSuccess(),
                ruleResults
            );
            return sequenceables.head[ParseResult](successes)
                .valueOrElse[ParseResult](fun() => withNextToken(tokens, fun(token: Token) =>
                    results.failure(name, describeToken(token))
                ));
        }
        
    public def tokenOfType fun(name: String) =>
        fun(tokens: Sequence[Token]) =>
            withNextToken(tokens, fun(token: Token) =>
                if token.name().equals(name) then do {
                    // TODO: should have function to get an option of both head and tail at the same time
                    return results.success[String](token.value(), tokens.tail());
                } else
                    results.failure(name, describeToken(token))
            )
    
    public def token fun(name: String, value: String) =>
        fun(tokens: Sequence[Token]) =>
            withNextToken(tokens, fun(token: Token) =>
                if and(token.name().equals(name), token.value().equals(value)) then
                    results.success[String](token.value(), tokens.tail())
                else
                    results.failure(describeTokenNameAndValue(name, value), describeToken(token))
            )
            
    def describeToken fun(token: Token) =>
        describeTokenNameAndValue(token.name(), token.value())
        
    def describeTokenNameAndValue fun(name: String, value: String) =>
        name.concat(" \"").concat(value).concat("\"");
        
    def withNextToken fun(tokens: Sequence[Token], func: Function[Token, ParseResult[String]]) =>
        sequences.head[Token](tokens)
            .map[Token, ParseResult[String]](func)
            .valueOrElse[ParseResult](fun() => results.failure("token", "end of token sequence"))
            
    public def map fun[F, T] => (rule: Rule, func: Function[F, T]) =>
        fun(tokens: Sequence[Token]) =>
            rule(tokens).map[T](func)
            
    public def sequence fun(rules: Sequenceable[Rule]) =>
        sequence2(rules.toSequence());
    
    public def sequence2 fun(rules: Sequence[Rule]) =>
        fun(tokens: Sequence[Token]) =>
            sequences.head[Rule](rules).map[ParseResult](fun(rule: Rule) => do {
                val result = rule(tokens);
                return if result.isSuccess() then
                    sequence2(rules.tail())(result.remaining())
                else
                    result;
            })
            .valueOrElse[ParseResult](fun() => results.success[Unit]((), tokens))
                
};
