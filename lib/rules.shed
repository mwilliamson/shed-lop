package lop;

import lazySequenceables;
import sequenceables;
import lazySequences;
import sequences;

import lop.Token;
import lop.results.ParseResult;
import lop.results.Success;
import lop.results.Failure;
import lop.Error;

val results = object {
    public def success fun[T] => (value: T, remaining: StringSource) =>
        Success[T](value, remaining);
        
    public val failure = Failure;
};

public val rules = object {
    // TODO: should be type Rule[T] = Fun(Sequence[Token]) => ParseResult[T]
    def Rule class() => {}
    
    public def firstOf fun(name: String, rules: List[Rule]) =>
        fun(tokens: Sequence[Token]) => do {
            val results = lazySequenceables.map[Rule, ParseResult](
                fun(rule: Rule) => rule(tokens),
                rules
            );
            val successes = lazySequenceables.filter[ParseResult](
                fun(result: ParseResult) => result.isSuccess(),
                results
            );
            return sequenceables.head[ParseResult](successes)
                .valueOrElse[ParseResult](fun() => Failure());
        }
        
    public def tokenOfType fun(name: String) =>
        fun(tokens: Sequence[Token]) =>
            sequences.head[Token](tokens).map[Token, ParseResult](fun(token: Token) =>
                if token.name().equals(name) then do {
                    // TODO: should have function to get an option of both head and tail at the same time
                    return results.success[String](token.value(), tokens.tail());
                } else
                    results.failure(Error(name, describeToken(token.name(), token.value())))
            ).valueOrElse[ParseResult](fun() => results.failure())
    
    public def token fun(name: String, value: String) =>
        fun(tokens: Sequence[Token]) =>
            sequences.head[Token](tokens).map[ParseResult](fun(token: Token) =>
                if and(token.name().equals(name), token.value().equals(value)) then
                    results.success[String](token.value(), tokens.tail())
                else
                    results.failure(Error(describeToken(name, value), describeToken(token.name(), token.value())))
            ).valueOrElse[ParseResult](fun() => results.failure())
            
    def describeToken fun(name: String, value: String) =>
        name.concat(" \"").concat(value).concat("\"");
    
    public def map fun[F, T] => (rule: Rule, func: Function[F, T]) =>
        fun(tokens: Sequence[Token]) =>
            rule(tokens).map[T](func)
            
    public def sequence fun[T] => (rules: Sequenceable[Rule]) =>
        sequence2[T](rules.toSequence());
    
    public def sequence2 fun[T] => (rules: Sequence[Rule]) =>
        fun(tokens: Sequence[Token]) =>
            sequences.head[Rule](rules).map[ParseResult](fun(rule: Rule) => do {
                val result = rule(tokens);
                return if result.isSuccess() then
                    sequence2[T](rules.tail())(result.remaining())
                else
                    result;
            })
            .valueOrElse[ParseResult](fun() => results.success[Unit]((), tokens))
                
};
