package lop;

import lazySequenceables;
import sequenceables;
import lazySequences;
import sequences;
import lists;
import tuples;

import lop.Token;
import lop.results.ParseResult;
import lop.results.Success;
import lop.results.Failure;
import lop.Error;

val results = object {
    members {
        success,
        failure
    }
    def success fun[T] => (value: T, remaining: StringSource) =>
        Success[T](value, remaining);
        
    def failure fun(expected: String, actual: String) =>
        Failure(Error(expected, actual));
};

public val rules = object {
    members {
        firstOf,
        tokenOfType,
        token,
        map,
        sequence,
        zeroOrMoreWithSeparator
    }
    
    // TODO: should be type Rule[T] = Fun(Sequence[Token]) => ParseResult[T]
    def Rule class() => {}
    
    def firstOf fun(name: String, rules: List[Rule]) =>
        fun(tokens: Sequence[Token]) => do {
            val ruleResults = lazySequenceables.map[Rule, ParseResult](
                fun(rule: Rule) => rule(tokens),
                rules
            );
            val successes = lazySequenceables.filter[ParseResult](
                fun(result: ParseResult) => result.isSuccess(),
                ruleResults
            );
            return sequenceables.head[ParseResult](successes)
                .valueOrElse[ParseResult](fun() => withNextToken(tokens, fun(token: Token) =>
                    results.failure(name, describeToken(token))
                ));
        }
        
    def tokenOfType fun(name: String) =>
        fun(tokens: Sequence[Token]) =>
            withNextToken(tokens, fun(token: Token) =>
                if token.name().equals(name) then do {
                    // TODO: should have function to get an option of both head and tail at the same time
                    return results.success[String](token.value(), tokens.tail());
                } else
                    results.failure(name, describeToken(token))
            )
    
    def token fun(name: String, value: String) =>
        fun(tokens: Sequence[Token]) =>
            withNextToken(tokens, fun(token: Token) =>
                if and(token.name().equals(name), token.value().equals(value)) then
                    results.success[String](token.value(), tokens.tail())
                else
                    results.failure(describeTokenNameAndValue(name, value), describeToken(token))
            )
            
    def describeToken fun(token: Token) =>
        describeTokenNameAndValue(token.name(), token.value())
        
    def describeTokenNameAndValue fun(name: String, value: String) =>
        name.concat(" \"").concat(value).concat("\"");
        
    def withNextToken fun(tokens: Sequence[Token], func: Function[Token, ParseResult[String]]) =>
        sequences.head[Token](tokens)
            .map[Token, ParseResult[String]](func)
            .valueOrElse[ParseResult](fun() => results.failure("token", "end of token sequence"))
            
    def map fun[F, T] => (rule: Rule, func: Function[F, T]) =>
        fun(tokens: Sequence[Token]) =>
            rule(tokens).map[T](func)

    // type SequenceRule[T] = Rule[T] | Capture[T];

    def sequence fun() =>
        emptySequenceRule;
        
    val noOpRule =
        fun(tokens: Sequence[Tokens]) =>
            results.success((), tokens);
        
    def SequenceRule class[T1, T2, Tn] => (
        previousRule: Rule[Tuple[T1, T2]],
        nextRule: Rule[Tn],
        func: Function[Tuple[T1, T2], Tn, R]
    ) => {
        members {
            next,
            capture,
            end
        }

        def next fun(rule: Rule[Any]) =>
            SequenceRule(
                end(),
                rule,
                fun(previousValues: Tuple[T1, T2, Tn], _: Any) => previousValues
            );
        
        def capture fun[U] => (rule: Rule[U]) =>
            SequenceRule(
                end(),
                rule,
                fun(previousValues: Tuple[T1, T2, Tn], nextValue: U) =>
                    previousValues.append(nextValue)
            )

        def end fun() => 
            fun(tokens: Sequence[Tokens]) =>
                previousRule(tokens).bindWithRemaining(fun(previousValue: Tuple[T1, T2], remaining: Sequence[Tokens]) =>
                    nextRule(remaining).map(fun(nextValue: Any) =>
                        func(previousValue, nextValue)))
    }
        
    val emptySequenceRule = SequenceRule(
        noOpRule, noOpRule, fun(_: Any, _: Any) => tuple());
        
    def zeroOrMoreWithSeparator fun[T] => (rule: Rule[T], separator: Rule[Any]) =>
        map(zeroOrMoreWithSeparator2(rule, separator), lists.sequenceToList)
        
    def zeroOrMoreWithSeparator2 fun[T] => (rule: Rule[T], separator: Rule[Any]) =>
        fun(tokens: Sequence[Token]) => do {
            val result = rule(tokens);
            return if result.isSuccess() then do {
                val separatorAndRule = map(
                    sequence().next(separator).capture(rule).end(),
                    tuples.head
                );
                val remainingRule = zeroOrMore(separatorAndRule);
                val remainingResult = remainingRule(result.remaining());
                // zeroOrMore always returns success, and therefore always has a value
                return results.success(sequences.cons(result.value(), remainingResult.value()), remainingResult.remaining());
            } else
                results.success(sequences.nil, tokens);
        }
        
    def zeroOrMore fun[T] => (rule: Rule[T]) =>
        fun(tokens: Sequence[Token]) => do {
            val result = rule(tokens);
            return if result.isSuccess() then do {
                val remainingResult = zeroOrMore(rule)(result.remaining());
                return if remainingResult.isSuccess() then
                    results.success(sequences.cons(result.value(), remainingResult.value()), remainingResult.remaining())
                else
                    result.map(sequences.singleton);
            } else
                results.success(sequences.nil, tokens);
        }
};
