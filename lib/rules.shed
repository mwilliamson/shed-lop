module lop/rules;

members::
    firstOf,
    tokenOfType,
    token,
    map,
    sequence,
    zeroOrMore,
    zeroOrMoreWithSeparator,
    optional,
    addSource

import lazySequences;
import sequences;
import lists;
import tuples;
import options;
import meta;

import lop/token.Token;
import lop/results.ParseResult;
import lop/results;
import lop/messages.unexpectedInputError;
import lop/sources;
import lop/sources.noSource;
import lop/range.Range;

// TODO: should be type Rule[T] = Fun(Sequence[Token]) => ParseResult[T]
def Rule class() => ::
    pass

def firstOf fun(name: String, rules: List[Rule]) =>
    fun(tokens: Sequence[Token]) => do::
        val ruleResults = lazySequences.map[Rule, ParseResult](
            fun(rule: Rule) => rule(tokens),
            rules
        );
        val stops = lazySequences.filter(
            fun(result: ParseResult) => or(result.isSuccess(), result.isFatal()),
            ruleResults
        );
        return sequences.head(stops)
            .valueOrElse[ParseResult](fun() => withNextToken(tokens, fun(token: Token) =>
                results.failure(unexpectedInputError(name, describeToken(token), token.source()))
            ));
    
def tokenOfType fun(name: String) =>
    fun(tokens: Sequence[Token]) =>
        withNextToken(tokens, fun(token: Token, rest: Sequence[Token]) =>
            if token.name().equals(name) then do::
                // TODO: should have function to get an option of both head and tail at the same time
                return results.success(token.value(), rest);
            else
                results.failure(unexpectedInputError(name, describeToken(token), token.source()))
        )

def token fun(name: String, value: String) =>
    fun(tokens: Sequence[Token]) =>
        withNextToken(tokens, fun(token: Token, rest: Sequence[Token]) =>
            if token.name().equals(name) && token.value().equals(value) then
                results.success(token.value(), rest)
            else
                results.failure(unexpectedInputError(
                    describeTokenNameAndValue(name, value, noSource),
                    describeToken(token),
                    token.source()
                ))
        )
        
def describeToken fun(token: Token) =>
    describeTokenNameAndValue(token.name(), token.value())
    
def describeTokenNameAndValue fun(name: String, value: String) =>
    name.concat(" \"").concat(value).concat("\"");
    
def withNextToken fun(tokens: Sequence[Token], func: Function[Token, ParseResult[String]]) => let
    val item = tokens.currentItem()
    in if sequences.isNil(item) then
        results.failure(unexpectedInputError("token", "end of token sequence", noSource))
    else
        func(item.head(), item.tail())
        
def map fun[F, T] => (rule: Rule, func: Function[F, T]) =>
    fun(tokens: Sequence[Token]) =>
        rule(tokens).map[T](func)

// type SequenceRule[T] = Rule[T] | Capture[T];

def sequence fun() =>
    emptySequenceRule;
    
val noOpRule =
    fun(tokens: Sequence[Tokens]) =>
        results.success((), tokens);
    
def SequenceRule class[T1, T2, Tn] => (
    previousRule: Rule[Tuple[T1, T2]],
    nextRule: Rule[Tn],
    func: Function[Tuple[T1, T2], Tn, Tuple[R1, R2, Rn]],
    hasCut: Boolean,
    nextCut: Boolean
) => ::
    members::
        next,
        capture,
        cut,
        tuple,
        map sequenceMap,
        head

    def next fun(rule: Rule[Any]) =>
        append(
            rule,
            fun(previousValues: Tuple[T1, T2, Tn], _: Any) => previousValues
        );
    
    def capture fun[U] => (rule: Rule[U]) =>
        append(
            rule,
            fun(previousValues: Tuple[T1, T2, Tn], nextValue: U) =>
                previousValues.appendDestructive(nextValue)
        )
        
    def append fun[U] => (rule: Rule[U], func: Function[Tuple[T1, T2, Tn], U]) =>
        SequenceRule(tuple(), rule, func, nextCut, nextCut);
        
    def cut fun() =>
        SequenceRule(previousRule, nextRule, func, hasCut, true)

    def tuple fun() =>
        fun(tokens: Sequence[Tokens]) =>
            previousRule(tokens).bindWithRemaining(fun(previousValue: Tuple[T1, T2], remaining: Sequence[Tokens]) => do::
                val nextResult = nextRule(remaining);
                return if nextResult.isFailure() && hasCut then
                    results.fatal(nextResult.message())
                else
                    nextResult.map(fun(nextValue: Tn) =>
                        func(previousValue, nextValue)
                    );
            );
                    
    def sequenceMap fun[U] => (func: Function[R1, R2, Rn, U]) =>
        map(tuple(), pack(func))
        
    def head fun() =>
        map(tuple(), tuples.head)
    
val emptySequenceRule = SequenceRule(
    noOpRule, noOpRule, fun(_: Any, _2: Any) => tuple(), false, false);
    
def zeroOrMoreWithSeparator fun[T] => (rule: Rule[T], separator: Rule[Any]) =>
    map(zeroOrMoreWithSeparator2(rule, separator), lists.sequenceToList)
    
def zeroOrMoreWithSeparator2 fun[T] => (rule: Rule[T], separator: Rule[Any]) => do::
    val separatorAndRule = map(
        sequence().next(separator).capture(rule).tuple(),
        tuples.head
    );
    return fun(tokens: Sequence[Token]) => do::
        val result = rule(tokens);
        return if result.isSuccess() then do::
            val remainingRule = zeroOrMore2(separatorAndRule);
            val remainingResult = remainingRule(result.remaining());
            
            return remainingResult.map(fun(remainingValues: Sequence[T]) =>
                sequences.cons(result.value(), remainingValues)
            );
        else
            failureToSuccess(result, results.success(sequences.nil, tokens));
    
def zeroOrMore fun[T] => (rule: Rule[T]) =>
    map(zeroOrMore2(rule), lists.sequenceToList)
    
def zeroOrMore2 fun[T] => (rule: Rule[T]) =>
    fun(tokens: Sequence[Token]) => do::
        val result = rule(tokens);
        return if result.isSuccess() then do::
            val remainingResult = zeroOrMore2(rule)(result.remaining());
            return if remainingResult.isSuccess() then
                results.success(sequences.cons(result.value(), remainingResult.value()), remainingResult.remaining())
            else if remainingResult.isFatal() then
                remainingResult
            else
                result.map(sequences.singleton);
        else
            failureToSuccess(result, results.success(sequences.nil, tokens));
    
def failureToSuccess fun[T] => (result: ParseResult[T], success: Success[T]) =>
    if result.isFailure() then success else result

def optional fun[T] => (rule: Rule[T]) =>
    fun(tokens: Sequence[Token]) => do::
        val result = rule(tokens);
        return if result.isFailure() then
            results.success(options.none, tokens)
        else
            result.map(options.some);

def addSource fun[T] => (rule: Rule[T]) =>
    let val createSource = fun(from: Token, to: Token) => let
        // Assumes that the underlying source is consistent
        // TODO: will include trailing whitespace
        val fromSource = from.source()
        val toSource = to.source()
        in sources.StringSource(
            fromSource.originalString(),
            fromSource.description(),
            Range(
                fromSource.indexRange().start(),
                toSource.indexRange().start()
            )
        )
    in fun(tokens: Sequence[Token]) =>
        // TODO: handle end of input
        rule(tokens).bindWithRemaining(fun(value: T, remaining: Sequence[Token]) => let
            val source = createSource(tokens.currentItem().head(), remaining.currentItem().head())
            val valueWithSource = sources.setSource(value, source)
            in results.success(valueWithSource, remaining)
        )
