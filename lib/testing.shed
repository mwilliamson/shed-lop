module lop/testing;

members {
    isFailure,
    isFailureWithMessage,
    isFatalWithMessage,
    isSuccess,
    hasSource
}

import sequences;
import lazySequences;
import strings;

import duck.MatchResult;
import duck;

import lop/token.Token;
import lop/results;
import lop/sources;

val isFailure = object {
    members {
        describeSelf,
        matches,
        describeMismatch,
        matchesWithDescription
    }
    
    def describeSelf fun() => "failure";
    
    def matches fun(result: ParseResult) =>
        matchesWithDescription(result).matches();
    
    def describeMismatch fun(result: ParseResult) =>
        matchesWithDescription(result).mismatchDescription();
        
    def matchesWithDescription fun(result: Result) =>
        if result.isSuccess() then
            MatchResult(false, "was not failure, was ".concat(represent(result)))
        else
            MatchResult(true, "");
};

def isFailureWithMessage fun(message: Message) => object {
    members {
        describeSelf,
        matches,
        describeMismatch,
        matchesWithDescription
    }
    
    def describeSelf fun() => "failure with message: ".concat(represent(message));
    
    def matches fun(result: ParseResult) =>
        matchesWithDescription(result).matches();
    
    def describeMismatch fun(result: ParseResult) =>
        matchesWithDescription(result).mismatchDescription();
        
    def matchesWithDescription fun(result: Result) =>
        if not(result.isFailure()) then
            MatchResult(false, "was not failure, was ".concat(represent(result)))
        else if not(equal(result.message(), message)) then
            MatchResult(false, "message was ".concat(represent(result.message())))
        else
            MatchResult(true, "");
};

def isFatalWithMessage fun(message: Message) => duck.equalTo(results.fatal(message));

def isSuccess fun[T] => (matcher: Matcher[T]) => object {
    members {
        describeSelf,
        matches,
        describeMismatch,
        matchesWithDescription
    }
    
    def describeSelf fun() => "success with value ".concat(matcher.describeSelf());
    
    def matches fun(result: ParseResult) =>
        matchesWithDescription(result).matches();
    
    def describeMismatch fun(result: ParseResult) =>
        matchesWithDescription(result).mismatchDescription();
        
    def matchesWithDescription fun(result: Result) =>
        if result.isSuccess() then
            if not(matcher.matches(result.value())) then
                MatchResult(false, "value didn't match: ".concat(matcher.describeMismatch(result.value())))
            else if not(sequences.isNil(result.remaining().currentItem())) then
                MatchResult(false, "entire input was not consumed, remaining was: ".concat(
                    strings.join(", ", lazySequences.map(represent, result.remaining()))
                ))
            else
                MatchResult(true, "")
        else
            MatchResult(false, "was not success, was ".concat(represent(result)))
}

def hasSource fun(expectedSource: StringSource) => object {
    members {
        describeSelf,
        matches,
        describeMismatch,
        matchesWithDescription
    }
    
    def describeSelf fun() => "hasSource(".concat(represent(expectedSource)).concat(")");
    
    def matches fun(value: Any) =>
        matchesWithDescription(value).matches();
    
    def describeMismatch fun(value: Any) =>
        matchesWithDescription(value).mismatchDescription();
        
    def matchesWithDescription fun(value: Any) =>
        sources.tryGetSource(value)
            .map(duck.equalTo(expectedSource).matchesWithDescription)
            .valueOrElse(fun() => MatchResult(false, "value had no source"))
}
