module lop/pratt;

members {
    parser Parser,
    infix InfixRule
}

import lazySequences;
import sequences;

import lop/rules;
import lop/results;

def Parser class[T] => (name: String, prefixRules: List[Rule[T]], infixRules: List[Any]) => {
    members {
        leftAssociative,
        rightAssociative,
        rule
    }
    
    val prefixRule = rules.firstOf(name, prefixRules);
    
    def leftAssociative fun(name: String) =>
        applyRules(infixRulesUntilExclusive(name))
        
    def rightAssociative fun(name: String) =>
        applyRules(infixRulesUntilInclusive(name))
    
    def rule fun() =>
        applyRules(infixRules)
        
    def applyRules fun(applicableInfixRules: Sequence[InfixRule[T]]) =>
        fun(tokens: Sequence[Token]) =>
            prefixRule(tokens).bindWithRemaining(applyInfixRules(applicableInfixRules))
    
    def applyInfixRules fun(applicableInfixRules: Sequence[InfixRule[T]]) =>
        fun(left: T, remaining: Sequence[Token]) => do {
            val applyInfixRule = fun(infixRule: InfixRule[T]) => infixRule.apply(remaining);
            val infixResults = lazySequences.map(applyInfixRule, applicableInfixRules);
            val terminalInfixResults = lazySequences.filter(isTerminalResult, infixResults);
            return sequences.head(terminalInfixResults)
                .map(fun(infixResult: ParseResult[T]) =>
                    infixResult.map(fun(infix: Any) => infix(left))
                )
                .map(fun(result: ParseResult[T]) =>
                    result.bindWithRemaining(applyInfixRules(applicableInfixRules))
                )
                .valueOrElse(fun() => results.success(left, remaining));
        };
    
    def isTerminalResult fun(result: ParseResult[T]) => not(result.isFailure())
        
    def infixRulesUntilInclusive fun(name: String) =>
        remainingInfixRulesUntil(name, infixRules, true)
        
    def infixRulesUntilExclusive fun(name: String) =>
        remainingInfixRulesUntil(name, infixRules, false)
    
    def remainingInfixRulesUntil fun(name: String, rules: Sequence[InfixRule[T]], inclusive: Boolean) =>
        sequences.withItem(rules, fun(rule: InfixRule[T], remainingRules: Sequence[InfixRule[T]]) =>
            if equal(rule.name(), name) then
                if inclusive then
                    sequences.singleton(rule)
                else
                    sequences.nil
            else
                sequences.cons(rule, remainingInfixRulesUntil(name, remainingRules))
        ).valueOrElse(sequences.nil)
}

def InfixRule class[T] => (name: String, rule: Rule[T]) => {
    members {
        apply rule,
        name fun() => name
    }
}
